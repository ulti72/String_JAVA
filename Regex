
Package:  java.util.regex which  primarily consists of three classes: Pattern, Matcher, and PatternSyntaxException.

Used to search, edit, or manipulate text and data.

Pattern: A Pattern object is a compiled representation of a regular expression. No public constructors. These methods accept a regular expression as the first argument

Matcher: A Matcher object is the engine that interprets the pattern and performs match operations against an input string. No public construcotrs

PatternSyntaxException: bject is an unchecked exception that indicates a syntax error in a regular expression pattern.

 metacharacter â€” a character with special meaning interpreted by the matcher. The metacharacter "." means "any character" which is why the match succeeds in this example.

The metacharacters supported by this API are: <([{\^-=$!|]})?*+.>

There are two ways to force a metacharacter to be treated as an ordinary character:

precede the metacharacter with a backslash, or
enclose it within \Q (which starts the quote) and \E (which ends it).

Character class

Construct              Description
[abc]           a, b, or c (simple class)
[^abc]          Any character except a, b, or c (negation)
[a-zA-Z]        a through z, or A through Z, inclusive (range)
[a-d[m-p]]      a through d, or m through p: [a-dm-p] (union)
[a-z&&[def]]    d, e, or f (intersection)
[a-z&&[^bc]]    a through z, except for b and c: [ad-z] (subtraction)
[a-z&&[^m-p]]   a through z, and not m through p: [a-lq-z] (subtraction)

Predefined character class

Construct   Description
.           Any character (may or may not match line terminators)
\d          A digit: [0-9]
\D          A non-digit: [^0-9]
\s          A whitespace character: [ \t\n\x0B\f\r]
\S          A non-whitespace character: [^\s]
\w          A word character: [a-zA-Z_0-9]
\W          A non-word character: [^\w]

Quantifiers
Quantifiers allow you to specify the number of occurrences to match against.

Greedy  Reluctant   Possessive  Meaning
X?       X??         X?+        X, once or not at all
X*       X*?         X*+        X, zero or more times
X+       X+?         X++        X, one or more times
X{n}     X{n}?       X{n}+      X, exactly n times
X{n,}    X{n,}?      X{n,}+     X, at least n times
X{n,m}   X{n,m}?     X{n,m}+    X, at least n but not more than m times


? -> zero or one
+ -> one or more
* -> zero or more
a{n} -> to find 'a' exactly  n times
a{3,6} -> find at least 3 (but no more than 6) a's in a row
Enter input string to search: aaaaaaaaa
I found the text "aaaaaa" starting at index 0 and ending at index 6.
I found the text "aaa" starting at index 6 and ending at index 9

caputring groups

Enter your regex: (dog){3}
Enter input string to search: dogdogdogdogdogdog
I found the text "dogdogdog" starting at index 0 and ending at index 9.
I found the text "dogdogdog" starting at index 9 and ending at index 18.

Enter your regex: dog{3}
Enter input string to search: dogdogdogdogdogdog
No match found.


Differences Among Greedy, Reluctant, and Possessive Quantifiers
...............................................................
reedy quantifiers are considered "greedy" because they force the matcher to read in, or eat, the entire input string prior to attempting the first match. If the first match attempt (the entire input string) fails, the matcher backs off the input string by one character and tries again, repeating the process until a match is found or there are no more characters left to back off from. Depending on the quantifier used in the expression, the last thing it will try matching against is 1 or 0 characters.

The reluctant quantifiers, however, take the opposite approach: They start at the beginning of the input string, then reluctantly eat one character at a time looking for a match. The last thing they try is the entire input string.

Finally, the possessive quantifiers always eat the entire input string, trying once (and only once) for a match. Unlike the greedy quantifiers, possessive quantifiers never back off, even if doing so would allow the overall match to succeed.

To illustrate, consider the input string xfooxxxxxxfoo.


Enter your regex: .*foo  // greedy quantifier
Enter input string to search: xfooxxxxxxfoo
I found the text "xfooxxxxxxfoo" starting at index 0 and ending at index 13.

Enter your regex: .*?foo  // reluctant quantifier
Enter input string to search: xfooxxxxxxfoo
I found the text "xfoo" starting at index 0 and ending at index 4.
I found the text "xxxxxxfoo" starting at index 4 and ending at index 13.

Enter your regex: .*+foo // possessive quantifier
Enter input string to search: xfooxxxxxxfoo
No match found.


Capturing groups
................
Numbering
/////////

Numbering
As described in the Pattern API, capturing groups are numbered by counting their opening parentheses from left to right. In the expression ((A)(B(C))), for example, there are four such groups:

((A)(B(C)))
(A)
(B(C))
(C)
To find out how many groups are present in the expression, call the groupCount method on a matcher object. The groupCount method returns an int showing the number of capturing groups present in the matcher's pattern. In this example, groupCount would return the number 4, showing that the pattern contains 4 capturing groups.

There is also a special group, group 0, which always represents the entire expression. This group is not included in the total reported by groupCount. Groups beginning with (? are pure, non-capturing groups that do not capture text and do not count towards the group total. (You'll see examples of non-capturing groups later in the section Methods of the Pattern Class.)

It's important to understand how groups are numbered because some Matcher methods accept an int specifying a particular group number as a parameter:

public int start(int group): Returns the start index of the subsequence captured by the given group during the previous match operation.
public int end (int group): Returns the index of the last character, plus one, of the subsequence captured by the given group during the previous match operation.
public String group (int group): Returns the input subsequence captured by the given group during the previous match operation.

Methods of the Pattern Class
...............................

public boolean matches(String regex): Tells whether or not this string matches the given regular expression. An invocation of this method of the form str.matches(regex) yields exactly the same result as the expression Pattern.matches(regex, str).

public String[] split(String regex, int limit): Splits this string around matches of the given regular expression. An invocation of this method of the form str.split(regex, n) yields the same result as the expression Pattern.compile(regex).split(str, n)

public String[] split(String regex): Splits this string around matches of the given regular expression. This method works the same as if you invoked the two-argument split method with the given expression and a limit argument of zero. Trailing empty strings are not included in the resulting array.


Methods of the Matcher Class
................................


Index Methods
Index methods provide useful index values that show precisely where the match was found in the input string:

public int start(): Returns the start index of the previous match.
public int start(int group): Returns the start index of the subsequence captured by the given group during the previous match operation.
public int end(): Returns the offset after the last character matched.
public int end(int group): Returns the offset after the last character of the subsequence captured by the given group during the previous match operation

Study methods

public boolean lookingAt(): Attempts to match the input sequence, starting at the beginning of the region, against the pattern.
public boolean find(): Attempts to find the next subsequence of the input sequence that matches the pattern.
public boolean find(int start): Resets this matcher and then attempts to find the next subsequence of the input sequence that matches the pattern, starting at the specified index.
public boolean matches(): Attempts to match the entire region against the pattern.



Boundary Constructs
...................
Boundary Construct  Description
^                   The beginning of a line
$                   The end of a line
\b                  A word boundary
\B                  A non-word boundary
\A                  The beginning of the input
\G                  The end of the previous match
\Z                  The end of the input but for the final terminator, if any
\z                  The end of the input

example: Enter your regex: ^dog$
Enter input string to search: dog
I found the text "dog" starting at index 0 and ending at index 3

BASIC SYNTAX
..............
String text    =
        "This is the text to be searched " +
        "for occurrences of the http:// pattern.";

String regex = ".*http://.*";

boolean matches = Pattern.matches(regex, text);

System.out.println("matches = " + matches);


String text    =
        "This is the text which is to be searched " +
        "for occurrences of the word 'is'.";

String regex = "is";

Pattern pattern = Pattern.compile(regex);
Matcher matcher = pattern.matcher(text);

int count = 0;
while(matcher.find()) {
    count++;
    System.out.println("found: " + count + " : "
            + matcher.start() + " - " + matcher.end());
}
